<%= link_to '投稿一覧へ', root_path, class: 'command_edit', style: 'background-image: linear-gradient(#d800f5 0%, rgb(221, 119, 207) 100%)' %>
<%= link_to "ログアウト",
 destroy_user_session_path, 
 method: :delete, 
 class: 'header-menu', 
 data: { confirm: 'ログアウトしますか？'},
 style:  'background-image: linear-gradient(#fd8567 0%, #f03333 100%)'%>
<h4> 現在 <%= current_user.name %> さんがログインしています </h4>
<h3 style="color:red; font-size: 20px; border-bottom: 3px solid #ddd"><%= @posts.length %>/ 1530 店制覇！</h3>
<p>設定した場所から半径1κm以内のお店を探せます。ピンをクリックするとお店までのルートが表示され、感想が投稿できます！(中心地に設定する場所は出来るだけ固有名詞でお願いします。 ex.) 東京タワー )</p>
<p>感想を書いたお店は青いピンが立ちます！まだのお店をクリックすると感想が投稿できます！</p>
<%# 以下、mapを表示するために必要 %>
<div id="target"></div>
<input type="text" id="keyword" placeholder="中心地を入力">
<button id="setting">ここを中心地を設定</button>
<button id="current">現在地を中心地に設定</button>
<button id="search">近くのお店を探す</button>
<%= link_to 'お店の感想を書く', new_post_path, class: 'header-menu', id: 'toukou'%>
<h2>
  My Posts
</h2>
<ul>
  <% @posts.each do |post| %>
  <li>
    <%= link_to post.title, post_path(post.id) %>
    <span class="command_class">
      <% if post.released? %>
      <%= link_to '非公開',"/posts/nonrelease/#{post.id}", method: :patch, class: 'nonrelease' %>
      <% else %>
      <%= link_to '公開',"/posts/release/#{post.id}", method: :patch, class: 'release', data: { confirm: '公開しますか？'}%>
      <% end %>
      <%= link_to '編集', edit_post_path(post.id), class: 'command_edit'%>
      <%= link_to 'x', 
post_path(post.id), 
method: :delete, 
class: 'command_x',
data: { confirm: '削除しますか？'}%>
    </span>
    <p style="font-size: 14px; color: blue">
      <%= post.comments.length %> 件のコメント
    </p>
  </li>
  <% end %>
</ul>
<script
  src="https://maps.googleapis.com/maps/api/js?language=ja&region=JP&key=AIzaSyCR9EmqJhJtXvukg0bstS-Sm_ATTsu6-Co&callback=initMap&libraries=places"
  async defer></script>

<script>
  document.getElementById("toukou").style.display = "none"; //Add New + のボタンは初期状態では隠す

  function initMap() {
    'use strict';

    let target = document.getElementById('target');
    let geocoder = new google.maps.Geocoder();
    let tokyo = {
      lat: 35.681167,
      lng: 139.767052
    };
    let center;
    let map;
    let service;
    let marker = [];
    let destination = [];
    let name = [];
    let current;
    let infoWindow;
    let posts = gon.posts; //投稿内容が格納された配列
    let DS = new google.maps.DirectionsService();
    let DR = new google.maps.DirectionsRenderer();

    // geolocationが対応していないブラウザの場合はアラートを表示
    if (!navigator.geolocation) {
      alert('Geolocation not supported!');
      return;
    }

    // 現在地を中心に、マップを描画
    map = new google.maps.Map(target, {
      center: tokyo,
      zoom: 14
    });

    // 以下、入力された場所を中心地に設定する処理
    document.getElementById('setting').addEventListener('click', function () {
      geocoder.geocode({
        address: document.getElementById('keyword').value
      }, function (results, status) {
        if (status !== 'OK') { //検索結果のstatusがOK以外の時の処理
          alert('Failed: ' + status);
          return;
        }
        center = results[0].geometry.location;

        if (center) { //検索結果があった時の処理
          map = new google.maps.Map(target, {
            center: center,
            zoom: 14
          });

          let center_marker = new google.maps.Marker({
            map: map,
            position: center,
            title: results[0].address_components[0].long_name,
            icon: {
              url: 'assets/current.png',
              scaledSize: new google.maps.Size(25, 25)
            }
          });

          // 名前が取得できない場合あり 
          // infoWindow = new google.maps.InfoWindow({
          //   content: results[0].address_components[0].long_name
          // });
          // infoWindow.open(map, center_marker);


        } else { //検索結果がなかった時の処理
          alert('No results found!')
        }
      });
    });

    // 以下、現在地を中心地に設定する処理 
    document.getElementById('current').addEventListener('click', function () {
      navigator.geolocation.getCurrentPosition(function (position) {
        center = {
          lat: position.coords.latitude,
          lng: position.coords.longitude
        }
        map = new google.maps.Map(target, {
          center: center,
          zoom: 14
        });

        let center_marker = new google.maps.Marker({
          map: map,
          position: center,
          title: '現在地',
          icon: {
            url: 'assets/current.png',
            scaledSize: new google.maps.Size(25, 25)
          }
        });
      });
    });

    // 以下、中心から半径1km以内のお店を表示するための処理
    document.getElementById('search').addEventListener('click', function () {
      if (!center) {
        alert('中心地を設定してください');
      }
      // 前回のマーカーをクリア
      let j;
      for (j = 0; j < marker.length; j++) {
        marker[j].setMap(null);
      }
      // 前回のルート検索結果があれば削除
      if (DR != null) {
        DR.set('directions', null);
      }
      // マップを初期位置に戻す
      map.setCenter(center);
      map.setZoom(14);
      // 半径1000m以内の検索結果にヒットした店舗を表示
      service = new google.maps.places.PlacesService(map);
      service.nearbySearch({
        location: center,
        radius: '1000',
        name: 'スターバックス'
      }, function (results, status) {
        let i;
        if (status === google.maps.places.PlacesServiceStatus.OK) {
          for (i = 0; i < results.length; i++) {
            name[i] = results[i].name;
            destination[i] = results[i].geometry.location;
            let j;
            let flag = true; //以下のfor文内に入ったかどうか判定するflag
            for (j = 0; j < posts.length; j++) {
              if (name[i] === posts[j].title) {
                marker[i] = new google.maps.Marker({
                  map: map,
                  position: destination[i],
                  title: name[i],
                  animation: google.maps.Animation.DROP,
                  icon: {
                    url: 'assets/map_marker.png',
                    scaledSize: new google.maps.Size(40, 40)
                  }
                });
                flag = false;
                gone_markerEvent(i);
                break;
              }
            }

            //上のfor文内に入っていなかったらデフォルトのマーカーを表示
            if (flag) {
              marker[i] = new google.maps.Marker({
                map: map,
                position: destination[i],
                title: name[i],
                animation: google.maps.Animation.DROP
              });
              new_markerEvent(i); //マーカーをクリックした時のイベントを追加
            }
          }
        } else {
          console.log('Failed: ' + status);
          alert('半径1km以内にスターバックスはありません');
          return;
        }
      });
    });

    //設定した中心地をもとにマップを描画する処理
    function draw_map() {
      if (center) {
        map = new google.maps.Map(target, {
          center: center,
          zoom: 14
        });

        let center_marker = new google.maps.Marker({
          map: map,
          position: center,
          title: center_title,
          icon: {
            url: 'assets/current.png',
            scaledSize: new google.maps.Size(25, 25)
          }
        });

        // 名前が取得できない場合あり 
        // infoWindow = new google.maps.InfoWindow({
        //   content: results[0].address_components[0].long_name
        // });
        // infoWindow.open(map, center_marker);


      } else { //検索結果がなかった時の処理
        alert('No results found!')
      }
    }

    // 新しいマーカーをクリックした時の処理
    function new_markerEvent(i) {
      DR.setMap(map); //map を DirectionsRendererオブジェクトのsetMap()を使って関連付け
      marker[i].addListener('click', function () {
        //新規投稿のボタンが無ければボタンを表示する
        if (document.getElementById('toukou').style.display === "none") {
          document.getElementById('toukou').style.display = "block";
        }
        markerEvent(i);
      });
    }

    // 行ったことのあるマーカーをクリックした時の処理
    function gone_markerEvent(i) {
      DR.setMap(map); //map を DirectionsRendererオブジェクトのsetMap()を使って関連付け
      marker[i].addListener('click', function () {
        if (document.getElementById('toukou').style.display === "block") {
          document.getElementById('toukou').style.display = "none";
        }
        markerEvent(i);
      });
    }

    // どちらのマーカーをクリックしても共通して行う処理
    function markerEvent(i) {
      //マーカーの店舗情報をtoukouのurlに追加
      $('#toukou').attr('href', '/posts/new' + '?' + 'name=' + name[i]);

      if (infoWindow) {
        infoWindow.close(); //値が入っていたらinfoWindowを閉じる
      }
      let request = {
        origin: center,
        destination: destination[i],
        travelMode: google.maps.TravelMode.WALKING //検索結果を徒歩ルートに指定
      };
      DS.route(request, function (result, status) { //ルート検索を実行
        DR.setOptions({
          suppressMarkers: true //デフォルトで表示されるマーカーを非表示に
        });
        let time = result.routes[0].legs[0].duration.text; // 所要時間を取得
        infoWindow = new google.maps.InfoWindow({
          content: '徒歩' + time
        });
        infoWindow.open(map, marker[i]);
        DR.setDirections(result); //ルートの検索結果をmapに描画
      });
    }
  }
</script>